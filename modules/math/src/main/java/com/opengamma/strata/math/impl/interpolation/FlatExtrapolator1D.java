/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.math.impl.interpolation;

import java.util.Set;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.Property;
import org.joda.beans.impl.light.LightMetaBean;

import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.math.impl.interpolation.data.Interpolator1DDataBundle;

/**
 * 
 */
@BeanDefinition(style = "light", constructorScope = "public")
public final class FlatExtrapolator1D
    implements Extrapolator1D, ImmutableBean {

  /** The extrapolator name. */
  public static final String NAME = "Flat";

  //-------------------------------------------------------------------------
  @Override
  public double extrapolate(Interpolator1DDataBundle data, double value, Interpolator1D interpolator) {
    JodaBeanUtils.notNull(data, "data");
    if (value < data.firstKey()) {
      return data.firstValue();
    } else if (value > data.lastKey()) {
      return data.lastValue();
    }
    throw new IllegalArgumentException("Value " + value + " was within data range");
  }

  @Override
  public double firstDerivative(Interpolator1DDataBundle data, double value, Interpolator1D interpolator) {
    ArgChecker.notNull(data, "data");
    if (value < data.firstKey()) {
      return 0.;
    } else if (value > data.lastKey()) {
      return 0.;
    }
    throw new IllegalArgumentException("Value " + value + " was within data range");
  }

  @Override
  public double[] getNodeSensitivitiesForValue(
      Interpolator1DDataBundle data,
      double value,
      Interpolator1D interpolator) {

    ArgChecker.notNull(data, "data");
    int n = data.size();
    if (value < data.firstKey()) {
      double[] result = new double[n];
      result[0] = 1;
      return result;
    } else if (value > data.lastKey()) {
      double[] result = new double[n];
      result[n - 1] = 1;
      return result;
    }
    throw new IllegalArgumentException("Value " + value + " was within data range");
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FlatExtrapolator1D}.
   */
  private static MetaBean META_BEAN = LightMetaBean.of(FlatExtrapolator1D.class);

  /**
   * The meta-bean for {@code FlatExtrapolator1D}.
   * @return the meta-bean, not null
   */
  public static MetaBean meta() {
    return META_BEAN;
  }

  static {
    JodaBeanUtils.registerMetaBean(META_BEAN);
  }

  /**
   * Creates an instance.
   */
  public FlatExtrapolator1D() {
  }

  @Override
  public MetaBean metaBean() {
    return META_BEAN;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      return true;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(32);
    buf.append("FlatExtrapolator1D{");
    buf.append('}');
    return buf.toString();
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
