/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.strata.math.impl.interpolation;

import java.util.Arrays;
import java.util.Set;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.Property;
import org.joda.beans.impl.light.LightMetaBean;

import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.math.impl.interpolation.data.ArrayInterpolator1DDataBundle;
import com.opengamma.strata.math.impl.interpolation.data.InterpolationBoundedValues;
import com.opengamma.strata.math.impl.interpolation.data.Interpolator1DDataBundle;

/**
 * Two points are interpolated by an exponential function y = a * exp( b * x ), where a, b are real constants. 
 * Note that all of y data should have the same sign. 
 */
@BeanDefinition(style = "light", constructorScope = "public")
public final class ExponentialInterpolator1D
    extends Interpolator1D
    implements ImmutableBean {

  @Override
  public double interpolate(Interpolator1DDataBundle data, double value) {
    JodaBeanUtils.notNull(data, "data");
    InterpolationBoundedValues boundedValues = data.getBoundedValues(value);
    Double x1 = boundedValues.getLowerBoundKey();
    Double y1 = boundedValues.getLowerBoundValue();
    if (boundedValues.getLowerBoundIndex() == data.size() - 1) {
      return y1;
    }
    Double x2 = boundedValues.getHigherBoundKey();
    Double y2 = boundedValues.getHigherBoundValue();
    return Math.pow(y2 / y1, (value - x1) / (x2 - x1)) * y1;
  }

  @Override
  public double firstDerivative(Interpolator1DDataBundle data, double value) {
    ArgChecker.notNull(data, "data bundle");
    int lowerIndex = data.getLowerBoundIndex(value);
    if (lowerIndex == data.size() - 1) {
      --lowerIndex;
    }
    Double x1 = data.getKeys()[lowerIndex];
    Double y1 = data.getValues()[lowerIndex];
    Double x2 = data.getKeys()[lowerIndex + 1];
    Double y2 = data.getValues()[lowerIndex + 1];
    double xDiffInv = 1.0 / (x2 - x1);
    double y2ovy1 = y2 / y1;
    return Math.pow(y2ovy1, (value - x1) * xDiffInv) * y1 * xDiffInv * Math.log(y2ovy1);
  }

  @Override
  public Interpolator1DDataBundle getDataBundle(double[] x, double[] y) {
    int nValues = y.length;
    for (int i = 1; i < nValues; ++i) {
      ArgChecker.isTrue(y[i - 1] * y[i] > 0, "All y values should have the same sign");
    }
    return new ArrayInterpolator1DDataBundle(x, y);
  }

  @Override
  public Interpolator1DDataBundle getDataBundleFromSortedArrays(double[] x, double[] y) {
    int nValues = y.length;
    for (int i = 1; i < nValues; ++i) {
      ArgChecker.isTrue(y[i - 1] * y[i] > 0, "All y values should have the same sign");
    }
    return new ArrayInterpolator1DDataBundle(x, y, true);
  }

  @Override
  public double[] getNodeSensitivitiesForValue(Interpolator1DDataBundle data, double value) {
    int size = data.size();
    double[] res = new double[size];
    Arrays.fill(res, 0.0);
    int lowerIndex = data.getLowerBoundIndex(value);
    if (lowerIndex == size - 1) {
      res[size - 1] = 1.0;
      return res;
    }
    Double x1 = data.getKeys()[lowerIndex];
    Double y1 = data.getValues()[lowerIndex];
    Double x2 = data.getKeys()[lowerIndex + 1];
    Double y2 = data.getValues()[lowerIndex + 1];
    double diffInv = 1.0 / (x2 - x1);
    double x1diffInv = (value - x1) * diffInv;
    double x2diffInv = (x2 - value) * diffInv;
    double y1ovy2 = y1 / y2;
    res[lowerIndex] = Math.pow(y1ovy2, -x1diffInv) * x2diffInv;
    res[lowerIndex + 1] = Math.pow(y1ovy2, x2diffInv) * x1diffInv;
    return res;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ExponentialInterpolator1D}.
   */
  private static MetaBean META_BEAN = LightMetaBean.of(ExponentialInterpolator1D.class);

  /**
   * The meta-bean for {@code ExponentialInterpolator1D}.
   * @return the meta-bean, not null
   */
  public static MetaBean meta() {
    return META_BEAN;
  }

  static {
    JodaBeanUtils.registerMetaBean(META_BEAN);
  }

  /**
   * Creates an instance.
   */
  public ExponentialInterpolator1D() {
  }

  @Override
  public MetaBean metaBean() {
    return META_BEAN;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      return true;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(32);
    buf.append("ExponentialInterpolator1D{");
    buf.append('}');
    return buf.toString();
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
