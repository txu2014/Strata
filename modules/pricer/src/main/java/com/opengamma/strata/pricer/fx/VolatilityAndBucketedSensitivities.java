/**
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.strata.pricer.fx;

import java.util.Set;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.light.LightMetaBean;

import com.opengamma.strata.collect.array.DoubleMatrix;

/**
 * Combines information about a volatility and its sensitivities.
 * <p>
 * This contains a volatility calculated at a particular x and y and the bucketed sensitivities
 * of this value to the volatility data points that were used to construct the surface.
 */
@BeanDefinition(style = "light")
final class VolatilityAndBucketedSensitivities
    implements ImmutableBean {
  // NOTE: This class is package scoped, as the Smile data provider API is effectively still in Beta

  /**
   * The volatility.
   */
  @PropertyDefinition
  private final double volatility;
  /**
   * The sensitivities.
   */
  @PropertyDefinition(validate = "notNull")
  private final DoubleMatrix sensitivities;

  //-------------------------------------------------------------------------
  /**
   * Obtains an instance.
   * 
   * @param volatility  the volatility
   * @param sensitivities  the bucketed sensitivities
   * @return the volatility and sensitivities
   */
  public static VolatilityAndBucketedSensitivities of(double volatility, DoubleMatrix sensitivities) {
    return new VolatilityAndBucketedSensitivities(volatility, sensitivities);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code VolatilityAndBucketedSensitivities}.
   */
  private static MetaBean META_BEAN = LightMetaBean.of(VolatilityAndBucketedSensitivities.class);

  /**
   * The meta-bean for {@code VolatilityAndBucketedSensitivities}.
   * @return the meta-bean, not null
   */
  public static MetaBean meta() {
    return META_BEAN;
  }

  static {
    JodaBeanUtils.registerMetaBean(META_BEAN);
  }

  private VolatilityAndBucketedSensitivities(
      double volatility,
      DoubleMatrix sensitivities) {
    JodaBeanUtils.notNull(sensitivities, "sensitivities");
    this.volatility = volatility;
    this.sensitivities = sensitivities;
  }

  @Override
  public MetaBean metaBean() {
    return META_BEAN;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the volatility.
   * @return the value of the property
   */
  public double getVolatility() {
    return volatility;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the sensitivities.
   * @return the value of the property, not null
   */
  public DoubleMatrix getSensitivities() {
    return sensitivities;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      VolatilityAndBucketedSensitivities other = (VolatilityAndBucketedSensitivities) obj;
      return JodaBeanUtils.equal(volatility, other.volatility) &&
          JodaBeanUtils.equal(sensitivities, other.sensitivities);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(volatility);
    hash = hash * 31 + JodaBeanUtils.hashCode(sensitivities);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("VolatilityAndBucketedSensitivities{");
    buf.append("volatility").append('=').append(volatility).append(',').append(' ');
    buf.append("sensitivities").append('=').append(JodaBeanUtils.toString(sensitivities));
    buf.append('}');
    return buf.toString();
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
