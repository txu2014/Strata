/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.pricer.impl.option;

import java.io.Serializable;
import java.util.Set;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.light.LightMetaBean;

/**
 * A data bundle for pricing in a Black framework.
 */
@BeanDefinition(style = "light")
public final class BlackFunctionData
    implements ImmutableBean, Serializable {

  /**
   * The forward value of the underlying asset
   * For example, the forward value of a stock, or the forward Libor rate.
   */
  @PropertyDefinition
  private final double forward;
  /**
   * The numeraire associated with the equation.
   */
  @PropertyDefinition
  private final double numeraire;
  /**
   * The Black volatility (sigma).
   */
  @PropertyDefinition
  private final double blackVolatility;

  //-------------------------------------------------------------------------
  /**
   * Data bundle for pricing in a Black framework.
   * That is, the forward value of the underlying asset is a martingale in the chosen numeraire measure.
   * 
   * @param forward  the forward value of the underlying asset, such as forward value of a stock, or forward Libor rate
   * @param numeraire  the present value of the instrument used to discount the payoff, such as the zero
   *  coupon bond in the T-forward measure, the swap annuity for pricing swaptions, etc
   * @param blackVolatility  the Black volatility (sigma)
   * @return the function data
   */
  public static BlackFunctionData of(double forward, double numeraire, double blackVolatility) {
    return new BlackFunctionData(forward, numeraire, blackVolatility);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code BlackFunctionData}.
   */
  private static MetaBean META_BEAN = LightMetaBean.of(BlackFunctionData.class);

  /**
   * The meta-bean for {@code BlackFunctionData}.
   * @return the meta-bean, not null
   */
  public static MetaBean meta() {
    return META_BEAN;
  }

  static {
    JodaBeanUtils.registerMetaBean(META_BEAN);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private BlackFunctionData(
      double forward,
      double numeraire,
      double blackVolatility) {
    this.forward = forward;
    this.numeraire = numeraire;
    this.blackVolatility = blackVolatility;
  }

  @Override
  public MetaBean metaBean() {
    return META_BEAN;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the forward value of the underlying asset
   * For example, the forward value of a stock, or the forward Libor rate.
   * @return the value of the property
   */
  public double getForward() {
    return forward;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the numeraire associated with the equation.
   * @return the value of the property
   */
  public double getNumeraire() {
    return numeraire;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the Black volatility (sigma).
   * @return the value of the property
   */
  public double getBlackVolatility() {
    return blackVolatility;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      BlackFunctionData other = (BlackFunctionData) obj;
      return JodaBeanUtils.equal(forward, other.forward) &&
          JodaBeanUtils.equal(numeraire, other.numeraire) &&
          JodaBeanUtils.equal(blackVolatility, other.blackVolatility);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(forward);
    hash = hash * 31 + JodaBeanUtils.hashCode(numeraire);
    hash = hash * 31 + JodaBeanUtils.hashCode(blackVolatility);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("BlackFunctionData{");
    buf.append("forward").append('=').append(forward).append(',').append(' ');
    buf.append("numeraire").append('=').append(numeraire).append(',').append(' ');
    buf.append("blackVolatility").append('=').append(JodaBeanUtils.toString(blackVolatility));
    buf.append('}');
    return buf.toString();
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
