/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.basics.market;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableMap;

/**
 * An immutable set of reference data
 * <p>
 * This is the standard immutable implementation of {@link ReferenceData}.
 */
@BeanDefinition(builderScope = "private", constructorScope = "package")
public final class ImmutableReferenceData
    implements ReferenceData, ImmutableBean, Serializable {

  /**
   * The empty instance.
   */
  private static final ImmutableReferenceData EMPTY = new ImmutableReferenceData(ImmutableMap.of());

  /**
   * The typed reference data values by identifier.
   */
  @PropertyDefinition(validate = "notNull", builderType = "Map<? extends ReferenceDataId, TypedReferenceData>")
  private final ImmutableMap<ReferenceDataId, TypedReferenceData> typedValues;

  //-------------------------------------------------------------------------
  /**
   * Obtains an instance from a map of typed reference data.
   * <p>
   * Each identifier in the map refers to an instance of {@link TypedReferenceData}.
   * This allows multiple values to be connected to the same identifier, accessed by type.
   * 
   * @param typedValues  the typed reference data values
   * @return reference data containing the values
   */
  public static ImmutableReferenceData of(Map<? extends ReferenceDataId, TypedReferenceData> typedValues) {
    return new ImmutableReferenceData(typedValues);
  }

  /**
   * Obtains an instance containing no reference data.
   *
   * @return empty reference data
   */
  public static ImmutableReferenceData empty() {
    return EMPTY;
  }

  //-------------------------------------------------------------------------
  @Override
  public Optional<TypedReferenceData> findTyped(ReferenceDataId identifier) {
    return Optional.ofNullable(typedValues.get(identifier));
  }

  @Override
  public Set<ReferenceDataId> identifiers() {
    return typedValues.keySet();
  }

  @Override
  public ReferenceData combinedWith(ReferenceData other) {
    Map<ReferenceDataId, TypedReferenceData> combined = new HashMap<>(typedValues);
    for (ReferenceDataId identifier : other.identifiers()) {
      combined.merge(identifier, other.getTyped(identifier), TypedReferenceData::combinedWith);
    }
    return ImmutableReferenceData.of(combined);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ImmutableReferenceData}.
   * @return the meta-bean, not null
   */
  public static ImmutableReferenceData.Meta meta() {
    return ImmutableReferenceData.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ImmutableReferenceData.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Creates an instance.
   * @param typedValues  the value of the property, not null
   */
  ImmutableReferenceData(
      Map<? extends ReferenceDataId, TypedReferenceData> typedValues) {
    JodaBeanUtils.notNull(typedValues, "typedValues");
    this.typedValues = ImmutableMap.copyOf(typedValues);
  }

  @Override
  public ImmutableReferenceData.Meta metaBean() {
    return ImmutableReferenceData.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the typed reference data values by identifier.
   * @return the value of the property, not null
   */
  public ImmutableMap<ReferenceDataId, TypedReferenceData> getTypedValues() {
    return typedValues;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ImmutableReferenceData other = (ImmutableReferenceData) obj;
      return JodaBeanUtils.equal(typedValues, other.typedValues);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(typedValues);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("ImmutableReferenceData{");
    buf.append("typedValues").append('=').append(JodaBeanUtils.toString(typedValues));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ImmutableReferenceData}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code typedValues} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<ReferenceDataId, TypedReferenceData>> typedValues = DirectMetaProperty.ofImmutable(
        this, "typedValues", ImmutableReferenceData.class, (Class) ImmutableMap.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "typedValues");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 173566508:  // typedValues
          return typedValues;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ImmutableReferenceData> builder() {
      return new ImmutableReferenceData.Builder();
    }

    @Override
    public Class<? extends ImmutableReferenceData> beanType() {
      return ImmutableReferenceData.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code typedValues} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMap<ReferenceDataId, TypedReferenceData>> typedValues() {
      return typedValues;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 173566508:  // typedValues
          return ((ImmutableReferenceData) bean).getTypedValues();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ImmutableReferenceData}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<ImmutableReferenceData> {

    private Map<? extends ReferenceDataId, TypedReferenceData> typedValues = ImmutableMap.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 173566508:  // typedValues
          return typedValues;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 173566508:  // typedValues
          this.typedValues = (Map<? extends ReferenceDataId, TypedReferenceData>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ImmutableReferenceData build() {
      return new ImmutableReferenceData(
          typedValues);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("ImmutableReferenceData.Builder{");
      buf.append("typedValues").append('=').append(JodaBeanUtils.toString(typedValues));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
