/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.basics.market;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ClassToInstanceMap;
import com.google.common.collect.ImmutableClassToInstanceMap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.MutableClassToInstanceMap;
import com.opengamma.strata.collect.Messages;

/**
 * An immutable set of typed reference data
 * <p>
 * This is the standard immutable implementation of {@link TypedReferenceData}.
 */
@BeanDefinition(builderScope = "private", constructorScope = "package")
public final class ImmutableTypedReferenceData
    implements TypedReferenceData, ImmutableBean, Serializable {

  /**
   * The reference data values by type.
   */
  @PropertyDefinition(validate = "notNull", builderType = "Map<Class<?>, ?>")
  private final ImmutableMap<Class<?>, Object> values;

  //-------------------------------------------------------------------------
  /**
   * Obtains an instance from a single piece of reference data.
   * <p>
   * The type specified is the type used to access the value, and not necessarily
   * the same as the class of the value.
   * 
   * @param <T>  the type of the data
   * @param type  the type of the reference data
   * @param value  the single reference data value
   * @return reference data containing the values
   */
  public static <T> ImmutableTypedReferenceData of(Class<T> type, T value) {
    return ImmutableTypedReferenceData.of(ImmutableClassToInstanceMap.builder().put(type, value).build());
  }

  /**
   * Obtains an instance from a map of values keyed by type.
   * <p>
   * Each value must be an instance of the type it is keyed by.
   * 
   * @param values  the reference data values
   * @return typed reference data containing the values
   * @throws ClassCastException if a value is not an instance of the type it is keyed by
   */
  public static ImmutableTypedReferenceData of(Map<Class<?>, ?> values) {
    // use ClassToInstanceMap to validate, but avoid using that type in bean property
    ImmutableClassToInstanceMap<Object> validated = ImmutableClassToInstanceMap.copyOf(values);
    return new ImmutableTypedReferenceData(validated);
  }

  //-------------------------------------------------------------------------
  @Override
  public <T> Optional<T> findValue(Class<T> type) {
    return Optional.ofNullable(type.cast(values.get(type)));
  }

  @Override
  public Set<Class<?>> types() {
    return values.keySet();
  }

  @Override
  public TypedReferenceData combinedWith(TypedReferenceData other) {
    ClassToInstanceMap<Object> combined = MutableClassToInstanceMap.create();
    combined.putAll(values);
    for (Class<?> type : other.types()) {
      combined.merge(type, other.getValue(type), (v1, v2) -> {
        if (v1.equals(v2)) {
          return v1;
        }
        throw new IllegalArgumentException(Messages.format(
            "Unable to combine reference data, values differ for type '{}'", type.getSimpleName()));
      });
    }
    return ImmutableTypedReferenceData.of(combined);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ImmutableTypedReferenceData}.
   * @return the meta-bean, not null
   */
  public static ImmutableTypedReferenceData.Meta meta() {
    return ImmutableTypedReferenceData.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ImmutableTypedReferenceData.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Creates an instance.
   * @param values  the value of the property, not null
   */
  ImmutableTypedReferenceData(
      Map<Class<?>, ?> values) {
    JodaBeanUtils.notNull(values, "values");
    this.values = ImmutableMap.copyOf(values);
  }

  @Override
  public ImmutableTypedReferenceData.Meta metaBean() {
    return ImmutableTypedReferenceData.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the reference data values by type.
   * @return the value of the property, not null
   */
  public ImmutableMap<Class<?>, Object> getValues() {
    return values;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ImmutableTypedReferenceData other = (ImmutableTypedReferenceData) obj;
      return JodaBeanUtils.equal(values, other.values);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(values);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("ImmutableTypedReferenceData{");
    buf.append("values").append('=').append(JodaBeanUtils.toString(values));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ImmutableTypedReferenceData}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code values} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<Class<?>, Object>> values = DirectMetaProperty.ofImmutable(
        this, "values", ImmutableTypedReferenceData.class, (Class) ImmutableMap.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "values");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -823812830:  // values
          return values;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ImmutableTypedReferenceData> builder() {
      return new ImmutableTypedReferenceData.Builder();
    }

    @Override
    public Class<? extends ImmutableTypedReferenceData> beanType() {
      return ImmutableTypedReferenceData.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code values} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMap<Class<?>, Object>> values() {
      return values;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -823812830:  // values
          return ((ImmutableTypedReferenceData) bean).getValues();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ImmutableTypedReferenceData}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<ImmutableTypedReferenceData> {

    private Map<Class<?>, ?> values = ImmutableMap.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -823812830:  // values
          return values;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -823812830:  // values
          this.values = (Map<Class<?>, ?>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ImmutableTypedReferenceData build() {
      return new ImmutableTypedReferenceData(
          values);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("ImmutableTypedReferenceData.Builder{");
      buf.append("values").append('=').append(JodaBeanUtils.toString(values));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
