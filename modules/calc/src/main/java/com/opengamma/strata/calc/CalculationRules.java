/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.calc;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableDefaults;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.calc.config.MarketDataRules;
import com.opengamma.strata.calc.config.ReportingCurrency;
import com.opengamma.strata.calc.config.pricing.PricingRules;
import com.opengamma.strata.calc.runner.function.CalculationFunction;

/**
 * A set of rules that define how the calculation engine should perform calculations.
 * <p>
 * The calculation rules include:
 * <ul>
 *   <li>The pricing rules which define how the calculations should be performed. This includes the model
 *   and any model parameters</li>
 *   <li>The market data rules which specify which items of market data should be used for a calculation,
 *   for example which curve group should be used as the source of curves and which market data feed should
 *   be used to request observable values</li>
 *   <li>The reporting currency defines the currency of the result</li>
 * </ul>
 */
@BeanDefinition
public final class CalculationRules implements ImmutableBean {

  /**
   * The rules defining how calculations should be performed.
   * <p>
   * This controls which {@link CalculationFunction} is used for a calculation.
   * This defaults to an empty instance if using the builder.
   */
  @PropertyDefinition(validate = "notNull")
  private final PricingRules pricingRules;
  /**
   * The rules that define what market data should be used in each calculation.
   * <p>
   * This controls which subset of the complete set of market data should be used for a calculation.
   * This defaults to an empty instance if using the builder.
   */
  @PropertyDefinition(validate = "notNull")
  private final MarketDataRules marketDataRules;
  /**
   * The reporting currency.
   * <p>
   * This controls the currency that the calculated result will be converted to.
   * This defaults to 'Natural' if using the builder.
   */
  @PropertyDefinition(validate = "notNull")
  private final ReportingCurrency reportingCurrency;

  //-------------------------------------------------------------------------
  /**
   * Obtains an instance specifying all the rules, using the "natural" reporting currency.
   * 
   * @param pricingRules  the pricing rules
   * @param marketDataRules  the market data rules
   * @return the rules
   */
  public static CalculationRules of(
      PricingRules pricingRules,
      MarketDataRules marketDataRules) {

    return of(pricingRules, marketDataRules, ReportingCurrency.NATURAL);
  }

  /**
   * Obtains an instance specifying all the rules.
   * 
   * @param pricingRules  the pricing rules
   * @param marketDataRules  the market data rules
   * @param reportingCurrency  the reporting currency
   * @return the rules
   */
  public static CalculationRules of(
      PricingRules pricingRules,
      MarketDataRules marketDataRules,
      ReportingCurrency reportingCurrency) {

    return new CalculationRules(pricingRules, marketDataRules, reportingCurrency);
  }

  @ImmutableDefaults
  private static void applyDefaults(Builder builder) {
    builder.pricingRules(PricingRules.empty());
    builder.marketDataRules(MarketDataRules.empty());
    builder.reportingCurrency(ReportingCurrency.NATURAL);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CalculationRules}.
   * @return the meta-bean, not null
   */
  public static CalculationRules.Meta meta() {
    return CalculationRules.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(CalculationRules.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static CalculationRules.Builder builder() {
    return new CalculationRules.Builder();
  }

  private CalculationRules(
      PricingRules pricingRules,
      MarketDataRules marketDataRules,
      ReportingCurrency reportingCurrency) {
    JodaBeanUtils.notNull(pricingRules, "pricingRules");
    JodaBeanUtils.notNull(marketDataRules, "marketDataRules");
    JodaBeanUtils.notNull(reportingCurrency, "reportingCurrency");
    this.pricingRules = pricingRules;
    this.marketDataRules = marketDataRules;
    this.reportingCurrency = reportingCurrency;
  }

  @Override
  public CalculationRules.Meta metaBean() {
    return CalculationRules.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the rules defining how calculations should be performed.
   * <p>
   * This controls which {@link CalculationFunction} is used for a calculation.
   * This defaults to an empty instance if using the builder.
   * @return the value of the property, not null
   */
  public PricingRules getPricingRules() {
    return pricingRules;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the rules that define what market data should be used in each calculation.
   * <p>
   * This controls which subset of the complete set of market data should be used for a calculation.
   * This defaults to an empty instance if using the builder.
   * @return the value of the property, not null
   */
  public MarketDataRules getMarketDataRules() {
    return marketDataRules;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the reporting currency.
   * <p>
   * This controls the currency that the calculated result will be converted to.
   * This defaults to 'Natural' if using the builder.
   * @return the value of the property, not null
   */
  public ReportingCurrency getReportingCurrency() {
    return reportingCurrency;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CalculationRules other = (CalculationRules) obj;
      return JodaBeanUtils.equal(pricingRules, other.pricingRules) &&
          JodaBeanUtils.equal(marketDataRules, other.marketDataRules) &&
          JodaBeanUtils.equal(reportingCurrency, other.reportingCurrency);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(pricingRules);
    hash = hash * 31 + JodaBeanUtils.hashCode(marketDataRules);
    hash = hash * 31 + JodaBeanUtils.hashCode(reportingCurrency);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("CalculationRules{");
    buf.append("pricingRules").append('=').append(pricingRules).append(',').append(' ');
    buf.append("marketDataRules").append('=').append(marketDataRules).append(',').append(' ');
    buf.append("reportingCurrency").append('=').append(JodaBeanUtils.toString(reportingCurrency));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CalculationRules}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code pricingRules} property.
     */
    private final MetaProperty<PricingRules> pricingRules = DirectMetaProperty.ofImmutable(
        this, "pricingRules", CalculationRules.class, PricingRules.class);
    /**
     * The meta-property for the {@code marketDataRules} property.
     */
    private final MetaProperty<MarketDataRules> marketDataRules = DirectMetaProperty.ofImmutable(
        this, "marketDataRules", CalculationRules.class, MarketDataRules.class);
    /**
     * The meta-property for the {@code reportingCurrency} property.
     */
    private final MetaProperty<ReportingCurrency> reportingCurrency = DirectMetaProperty.ofImmutable(
        this, "reportingCurrency", CalculationRules.class, ReportingCurrency.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "pricingRules",
        "marketDataRules",
        "reportingCurrency");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1055696081:  // pricingRules
          return pricingRules;
        case 363016849:  // marketDataRules
          return marketDataRules;
        case -1287844769:  // reportingCurrency
          return reportingCurrency;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public CalculationRules.Builder builder() {
      return new CalculationRules.Builder();
    }

    @Override
    public Class<? extends CalculationRules> beanType() {
      return CalculationRules.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code pricingRules} property.
     * @return the meta-property, not null
     */
    public MetaProperty<PricingRules> pricingRules() {
      return pricingRules;
    }

    /**
     * The meta-property for the {@code marketDataRules} property.
     * @return the meta-property, not null
     */
    public MetaProperty<MarketDataRules> marketDataRules() {
      return marketDataRules;
    }

    /**
     * The meta-property for the {@code reportingCurrency} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ReportingCurrency> reportingCurrency() {
      return reportingCurrency;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1055696081:  // pricingRules
          return ((CalculationRules) bean).getPricingRules();
        case 363016849:  // marketDataRules
          return ((CalculationRules) bean).getMarketDataRules();
        case -1287844769:  // reportingCurrency
          return ((CalculationRules) bean).getReportingCurrency();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code CalculationRules}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<CalculationRules> {

    private PricingRules pricingRules;
    private MarketDataRules marketDataRules;
    private ReportingCurrency reportingCurrency;

    /**
     * Restricted constructor.
     */
    private Builder() {
      applyDefaults(this);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(CalculationRules beanToCopy) {
      this.pricingRules = beanToCopy.getPricingRules();
      this.marketDataRules = beanToCopy.getMarketDataRules();
      this.reportingCurrency = beanToCopy.getReportingCurrency();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1055696081:  // pricingRules
          return pricingRules;
        case 363016849:  // marketDataRules
          return marketDataRules;
        case -1287844769:  // reportingCurrency
          return reportingCurrency;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1055696081:  // pricingRules
          this.pricingRules = (PricingRules) newValue;
          break;
        case 363016849:  // marketDataRules
          this.marketDataRules = (MarketDataRules) newValue;
          break;
        case -1287844769:  // reportingCurrency
          this.reportingCurrency = (ReportingCurrency) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public CalculationRules build() {
      return new CalculationRules(
          pricingRules,
          marketDataRules,
          reportingCurrency);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the rules defining how calculations should be performed.
     * <p>
     * This controls which {@link CalculationFunction} is used for a calculation.
     * This defaults to an empty instance if using the builder.
     * @param pricingRules  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder pricingRules(PricingRules pricingRules) {
      JodaBeanUtils.notNull(pricingRules, "pricingRules");
      this.pricingRules = pricingRules;
      return this;
    }

    /**
     * Sets the rules that define what market data should be used in each calculation.
     * <p>
     * This controls which subset of the complete set of market data should be used for a calculation.
     * This defaults to an empty instance if using the builder.
     * @param marketDataRules  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder marketDataRules(MarketDataRules marketDataRules) {
      JodaBeanUtils.notNull(marketDataRules, "marketDataRules");
      this.marketDataRules = marketDataRules;
      return this;
    }

    /**
     * Sets the reporting currency.
     * <p>
     * This controls the currency that the calculated result will be converted to.
     * This defaults to 'Natural' if using the builder.
     * @param reportingCurrency  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder reportingCurrency(ReportingCurrency reportingCurrency) {
      JodaBeanUtils.notNull(reportingCurrency, "reportingCurrency");
      this.reportingCurrency = reportingCurrency;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("CalculationRules.Builder{");
      buf.append("pricingRules").append('=').append(JodaBeanUtils.toString(pricingRules)).append(',').append(' ');
      buf.append("marketDataRules").append('=').append(JodaBeanUtils.toString(marketDataRules)).append(',').append(' ');
      buf.append("reportingCurrency").append('=').append(JodaBeanUtils.toString(reportingCurrency));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
