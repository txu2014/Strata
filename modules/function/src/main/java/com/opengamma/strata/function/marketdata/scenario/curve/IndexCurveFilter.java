/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.function.marketdata.scenario.curve;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.index.Index;
import com.opengamma.strata.basics.market.MarketDataBox;
import com.opengamma.strata.calc.marketdata.scenario.MarketDataFilter;
import com.opengamma.strata.market.curve.Curve;
import com.opengamma.strata.market.id.IndexCurveId;

/**
 * A market data filter matching a curve for an index.
 * <p>
 * The {@link #matches} method returns true if the curve index equals the one specified on construction.
 */
@BeanDefinition(builderScope = "private")
public final class IndexCurveFilter
    implements MarketDataFilter<Curve, IndexCurveId>, ImmutableBean {

  /**
   * The curve index.
   */
  @PropertyDefinition(validate = "notNull")
  private final Index index;

  //-------------------------------------------------------------------------
  /**
   * Returns a filter matching a curve for the specified index.
   *
   * @param index  the index
   * @return a filter matching a curve for the specified index
   */
  public static IndexCurveFilter of(Index index) {
    return new IndexCurveFilter(index);
  }

  //-------------------------------------------------------------------------

  @Override
  public Class<?> getMarketDataIdType() {
    return IndexCurveId.class;
  }

  @Override
  public boolean matches(IndexCurveId marketDataId, MarketDataBox<Curve> marketData) {
    return index.equals(marketDataId.getIndex());
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IndexCurveFilter}.
   * @return the meta-bean, not null
   */
  public static IndexCurveFilter.Meta meta() {
    return IndexCurveFilter.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IndexCurveFilter.Meta.INSTANCE);
  }

  private IndexCurveFilter(
      Index index) {
    JodaBeanUtils.notNull(index, "index");
    this.index = index;
  }

  @Override
  public IndexCurveFilter.Meta metaBean() {
    return IndexCurveFilter.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the curve index.
   * @return the value of the property, not null
   */
  public Index getIndex() {
    return index;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IndexCurveFilter other = (IndexCurveFilter) obj;
      return JodaBeanUtils.equal(index, other.index);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(index);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("IndexCurveFilter{");
    buf.append("index").append('=').append(JodaBeanUtils.toString(index));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IndexCurveFilter}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code index} property.
     */
    private final MetaProperty<Index> index = DirectMetaProperty.ofImmutable(
        this, "index", IndexCurveFilter.class, Index.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "index");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          return index;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends IndexCurveFilter> builder() {
      return new IndexCurveFilter.Builder();
    }

    @Override
    public Class<? extends IndexCurveFilter> beanType() {
      return IndexCurveFilter.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code index} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Index> index() {
      return index;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          return ((IndexCurveFilter) bean).getIndex();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code IndexCurveFilter}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<IndexCurveFilter> {

    private Index index;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          return index;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          this.index = (Index) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public IndexCurveFilter build() {
      return new IndexCurveFilter(
          index);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("IndexCurveFilter.Builder{");
      buf.append("index").append('=').append(JodaBeanUtils.toString(index));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
