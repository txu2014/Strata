/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.function.marketdata.scenario.curve;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.basics.market.MarketDataBox;
import com.opengamma.strata.calc.marketdata.scenario.MarketDataFilter;
import com.opengamma.strata.market.curve.Curve;
import com.opengamma.strata.market.id.RateCurveId;

/**
 * A market data filter which matches rate curves with a specific currency.
 * <p>
 * The {@link #matches} method returns true if the curve currency equals the one specified on construction.
 * For discounting curves, this is the currency of the curve.
 * For index curves it is the currency of the index.
 */
@BeanDefinition(builderScope = "private")
public final class RateCurveCurrencyFilter
    implements MarketDataFilter<Curve, RateCurveId>, ImmutableBean {

  /**
   * The currency matched by this filter.
   */
  @PropertyDefinition(validate = "notNull")
  private final Currency currency;

  //-------------------------------------------------------------------------
  /**
   * Returns a filter which matches curves with the specified currency.
   *
   * @param currency  the currency matched by this filter
   * @return a filter which matches curves with the specified currency
   */
  public static RateCurveCurrencyFilter of(Currency currency) {
    return new RateCurveCurrencyFilter(currency);
  }

  //-------------------------------------------------------------------------

  @Override
  public Class<?> getMarketDataIdType() {
    return RateCurveId.class;
  }

  @Override
  public boolean matches(RateCurveId curveId, MarketDataBox<Curve> marketData) {
    return currency.equals(curveId.getCurrency());
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code RateCurveCurrencyFilter}.
   * @return the meta-bean, not null
   */
  public static RateCurveCurrencyFilter.Meta meta() {
    return RateCurveCurrencyFilter.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(RateCurveCurrencyFilter.Meta.INSTANCE);
  }

  private RateCurveCurrencyFilter(
      Currency currency) {
    JodaBeanUtils.notNull(currency, "currency");
    this.currency = currency;
  }

  @Override
  public RateCurveCurrencyFilter.Meta metaBean() {
    return RateCurveCurrencyFilter.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currency matched by this filter.
   * @return the value of the property, not null
   */
  public Currency getCurrency() {
    return currency;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      RateCurveCurrencyFilter other = (RateCurveCurrencyFilter) obj;
      return JodaBeanUtils.equal(currency, other.currency);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(currency);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("RateCurveCurrencyFilter{");
    buf.append("currency").append('=').append(JodaBeanUtils.toString(currency));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code RateCurveCurrencyFilter}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code currency} property.
     */
    private final MetaProperty<Currency> currency = DirectMetaProperty.ofImmutable(
        this, "currency", RateCurveCurrencyFilter.class, Currency.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "currency");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 575402001:  // currency
          return currency;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends RateCurveCurrencyFilter> builder() {
      return new RateCurveCurrencyFilter.Builder();
    }

    @Override
    public Class<? extends RateCurveCurrencyFilter> beanType() {
      return RateCurveCurrencyFilter.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code currency} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Currency> currency() {
      return currency;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 575402001:  // currency
          return ((RateCurveCurrencyFilter) bean).getCurrency();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code RateCurveCurrencyFilter}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<RateCurveCurrencyFilter> {

    private Currency currency;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 575402001:  // currency
          return currency;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 575402001:  // currency
          this.currency = (Currency) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public RateCurveCurrencyFilter build() {
      return new RateCurveCurrencyFilter(
          currency);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("RateCurveCurrencyFilter.Builder{");
      buf.append("currency").append('=').append(JodaBeanUtils.toString(currency));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
