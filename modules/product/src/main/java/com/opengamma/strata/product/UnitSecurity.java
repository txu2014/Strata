/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.product;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableDefaults;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableMap;
import com.opengamma.strata.collect.id.LinkResolutionException;
import com.opengamma.strata.collect.id.LinkResolver;
import com.opengamma.strata.collect.id.Resolvable;
import com.opengamma.strata.collect.id.StandardId;

/**
 * A standard implementation of a security shared between trades.
 * <p>
 * This is the standard implementation of {@link Security}.
 * It represents a single unit of the security, such as one equity share or one futures contract.
 * <p>
 * The data for a security is split into two parts, the meta-data and the underlying product.
 * The product is intended to represent the financial contract of the security.
 * A product can typically be priced against a model as well as against the market.
 * The security itself holds the primary market identifier and user-defined attributes.
 * <p>
 * A {@code Security} will typically be referenced by a trade, such as implementations of {@link SecurityTrade}.
 * <p>
 * Implementations of this interface must be immutable beans.
 * 
 * @param <P>  the type of the product
 */
@BeanDefinition
public final class UnitSecurity<P extends Product>
    implements Security<P>, Resolvable<UnitSecurity<P>>, ImmutableBean, Serializable {

  /**
   * The primary standard identifier for the security.
   * <p>
   * The standard identifier is used to identify the security.
   * It will typically be an identifier in an external data system.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final StandardId standardId;
  /**
   * The extensible set of attributes.
   * <p>
   * Most data is available as bean properties.
   * Attributes are used to tag the object with additional information.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final ImmutableMap<String, String> attributes;
  /**
   * The name of the security, defaulted to an empty string.
   */
  @PropertyDefinition(validate = "notNull")
  private final String name;
  /**
   * The product that was agreed when the trade occurred.
   * <p>
   * All trades essentially refer to some kind of product.
   * The product captures the financial details of the security contract.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final P product;

  //-------------------------------------------------------------------------
  @SuppressWarnings({"unchecked", "rawtypes"})
  @ImmutableDefaults
  private static void applyDefaults(Builder builder) {
    builder.name = "";
  }

  //-------------------------------------------------------------------------
  /**
   * Resolves all links in this security, returning a fully resolved security.
   * <p>
   * This method examines the security, locates any links and resolves them.
   * The result is fully resolved with all data available for use.
   * <p>
   * An exception is thrown if a link cannot be resolved.
   * 
   * @param resolver  the resolver to use
   * @return the fully resolved security
   * @throws LinkResolutionException if a link cannot be resolved
   */
  @Override
  public UnitSecurity<P> resolveLinks(LinkResolver resolver) {
    return resolver.resolveLinksIn(this, product, resolved -> toBuilder().product(resolved).build());
  }

  //-------------------------------------------------------------------------
  /**
   * Returns a builder used to create an instance, specifying the product.
   * <p>
   * When using this method, the {@code product} property will be set in the builder.
   * 
   * @param <R>  the product type
   * @param product  the product to use
   * @return the builder, with the {@code productLink} property set
   */
  public static <R extends Product> UnitSecurity.Builder<R> builder(R product) {
    return UnitSecurity.<R>builder().product(product);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code UnitSecurity}.
   * @return the meta-bean, not null
   */
  @SuppressWarnings("rawtypes")
  public static UnitSecurity.Meta meta() {
    return UnitSecurity.Meta.INSTANCE;
  }

  /**
   * The meta-bean for {@code UnitSecurity}.
   * @param <R>  the bean's generic type
   * @param cls  the bean's generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R extends Product> UnitSecurity.Meta<R> metaUnitSecurity(Class<R> cls) {
    return UnitSecurity.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(UnitSecurity.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @param <P>  the type
   * @return the builder, not null
   */
  public static <P extends Product> UnitSecurity.Builder<P> builder() {
    return new UnitSecurity.Builder<P>();
  }

  private UnitSecurity(
      StandardId standardId,
      Map<String, String> attributes,
      String name,
      P product) {
    JodaBeanUtils.notNull(standardId, "standardId");
    JodaBeanUtils.notNull(attributes, "attributes");
    JodaBeanUtils.notNull(name, "name");
    JodaBeanUtils.notNull(product, "product");
    this.standardId = standardId;
    this.attributes = ImmutableMap.copyOf(attributes);
    this.name = name;
    this.product = product;
  }

  @SuppressWarnings("unchecked")
  @Override
  public UnitSecurity.Meta<P> metaBean() {
    return UnitSecurity.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the primary standard identifier for the security.
   * <p>
   * The standard identifier is used to identify the security.
   * It will typically be an identifier in an external data system.
   * @return the value of the property, not null
   */
  @Override
  public StandardId getStandardId() {
    return standardId;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the extensible set of attributes.
   * <p>
   * Most data is available as bean properties.
   * Attributes are used to tag the object with additional information.
   * @return the value of the property, not null
   */
  @Override
  public ImmutableMap<String, String> getAttributes() {
    return attributes;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name of the security, defaulted to an empty string.
   * @return the value of the property, not null
   */
  public String getName() {
    return name;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the product that was agreed when the trade occurred.
   * <p>
   * All trades essentially refer to some kind of product.
   * The product captures the financial details of the security contract.
   * @return the value of the property, not null
   */
  @Override
  public P getProduct() {
    return product;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder<P> toBuilder() {
    return new Builder<P>(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      UnitSecurity<?> other = (UnitSecurity<?>) obj;
      return JodaBeanUtils.equal(standardId, other.standardId) &&
          JodaBeanUtils.equal(attributes, other.attributes) &&
          JodaBeanUtils.equal(name, other.name) &&
          JodaBeanUtils.equal(product, other.product);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(standardId);
    hash = hash * 31 + JodaBeanUtils.hashCode(attributes);
    hash = hash * 31 + JodaBeanUtils.hashCode(name);
    hash = hash * 31 + JodaBeanUtils.hashCode(product);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("UnitSecurity{");
    buf.append("standardId").append('=').append(standardId).append(',').append(' ');
    buf.append("attributes").append('=').append(attributes).append(',').append(' ');
    buf.append("name").append('=').append(name).append(',').append(' ');
    buf.append("product").append('=').append(JodaBeanUtils.toString(product));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code UnitSecurity}.
   * @param <P>  the type
   */
  public static final class Meta<P extends Product> extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code standardId} property.
     */
    private final MetaProperty<StandardId> standardId = DirectMetaProperty.ofImmutable(
        this, "standardId", UnitSecurity.class, StandardId.class);
    /**
     * The meta-property for the {@code attributes} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<String, String>> attributes = DirectMetaProperty.ofImmutable(
        this, "attributes", UnitSecurity.class, (Class) ImmutableMap.class);
    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> name = DirectMetaProperty.ofImmutable(
        this, "name", UnitSecurity.class, String.class);
    /**
     * The meta-property for the {@code product} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<P> product = (DirectMetaProperty) DirectMetaProperty.ofImmutable(
        this, "product", UnitSecurity.class, Object.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "standardId",
        "attributes",
        "name",
        "product");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1284477768:  // standardId
          return standardId;
        case 405645655:  // attributes
          return attributes;
        case 3373707:  // name
          return name;
        case -309474065:  // product
          return product;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public UnitSecurity.Builder<P> builder() {
      return new UnitSecurity.Builder<P>();
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends UnitSecurity<P>> beanType() {
      return (Class) UnitSecurity.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code standardId} property.
     * @return the meta-property, not null
     */
    public MetaProperty<StandardId> standardId() {
      return standardId;
    }

    /**
     * The meta-property for the {@code attributes} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMap<String, String>> attributes() {
      return attributes;
    }

    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> name() {
      return name;
    }

    /**
     * The meta-property for the {@code product} property.
     * @return the meta-property, not null
     */
    public MetaProperty<P> product() {
      return product;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1284477768:  // standardId
          return ((UnitSecurity<?>) bean).getStandardId();
        case 405645655:  // attributes
          return ((UnitSecurity<?>) bean).getAttributes();
        case 3373707:  // name
          return ((UnitSecurity<?>) bean).getName();
        case -309474065:  // product
          return ((UnitSecurity<?>) bean).getProduct();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code UnitSecurity}.
   * @param <P>  the type
   */
  public static final class Builder<P extends Product> extends DirectFieldsBeanBuilder<UnitSecurity<P>> {

    private StandardId standardId;
    private Map<String, String> attributes = ImmutableMap.of();
    private String name;
    private P product;

    /**
     * Restricted constructor.
     */
    private Builder() {
      applyDefaults(this);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(UnitSecurity<P> beanToCopy) {
      this.standardId = beanToCopy.getStandardId();
      this.attributes = beanToCopy.getAttributes();
      this.name = beanToCopy.getName();
      this.product = beanToCopy.getProduct();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1284477768:  // standardId
          return standardId;
        case 405645655:  // attributes
          return attributes;
        case 3373707:  // name
          return name;
        case -309474065:  // product
          return product;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder<P> set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1284477768:  // standardId
          this.standardId = (StandardId) newValue;
          break;
        case 405645655:  // attributes
          this.attributes = (Map<String, String>) newValue;
          break;
        case 3373707:  // name
          this.name = (String) newValue;
          break;
        case -309474065:  // product
          this.product = (P) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder<P> set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<P> setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder<P> setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder<P> setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public UnitSecurity<P> build() {
      return new UnitSecurity<P>(
          standardId,
          attributes,
          name,
          product);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the primary standard identifier for the security.
     * <p>
     * The standard identifier is used to identify the security.
     * It will typically be an identifier in an external data system.
     * @param standardId  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<P> standardId(StandardId standardId) {
      JodaBeanUtils.notNull(standardId, "standardId");
      this.standardId = standardId;
      return this;
    }

    /**
     * Sets the extensible set of attributes.
     * <p>
     * Most data is available as bean properties.
     * Attributes are used to tag the object with additional information.
     * @param attributes  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<P> attributes(Map<String, String> attributes) {
      JodaBeanUtils.notNull(attributes, "attributes");
      this.attributes = attributes;
      return this;
    }

    /**
     * Sets the name of the security, defaulted to an empty string.
     * @param name  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<P> name(String name) {
      JodaBeanUtils.notNull(name, "name");
      this.name = name;
      return this;
    }

    /**
     * Sets the product that was agreed when the trade occurred.
     * <p>
     * All trades essentially refer to some kind of product.
     * The product captures the financial details of the security contract.
     * @param product  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<P> product(P product) {
      JodaBeanUtils.notNull(product, "product");
      this.product = product;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("UnitSecurity.Builder{");
      buf.append("standardId").append('=').append(JodaBeanUtils.toString(standardId)).append(',').append(' ');
      buf.append("attributes").append('=').append(JodaBeanUtils.toString(attributes)).append(',').append(' ');
      buf.append("name").append('=').append(JodaBeanUtils.toString(name)).append(',').append(' ');
      buf.append("product").append('=').append(JodaBeanUtils.toString(product));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
